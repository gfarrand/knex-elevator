// /////////////////////////////////////////////////////////////////////////////
//
// MIT License
//
// Copyright (c) 2017 gfarrand (grant.farrand@gmail.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// /////////////////////////////////////////////////////////////////////////////
#ifndef __I_TASK_H__
#define __I_TASK_H__


// /////////////////////////////////////////////////////////////////////////////
// Include(s)
// /////////////////////////////////////////////////////////////////////////////
#include <Arduino_FreeRTOS.h>


////////////////////////////////////////////////////////////////////////////////
/// @brief
/// A base class for running threads on FreeRTOS.
////////////////////////////////////////////////////////////////////////////////
class ITask
{
    public:
        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// A collection of defaults for creating ITask objects.
        ////////////////////////////////////////////////////////////////////////
        struct Defaults
        {
            static const int Priority = tskIDLE_PRIORITY + 1;
            static const int StackDepth = configMINIMAL_STACK_SIZE;
        };

    public:
        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// Basic destructor
        ////////////////////////////////////////////////////////////////////////
        virtual ~ITask(void);

        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// The name of the task.
        ////////////////////////////////////////////////////////////////////////
        char const* Name(void) const;

        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// Initializes resources required by this task.
        ///
        /// @remarks
        /// To be called from the Arduino setup() method.
        ////////////////////////////////////////////////////////////////////////
        virtual void Initialize(void) = 0;

        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// Schedules the thread for execution.
        ///
        /// @remarks
        /// To be called from the Arduino setup() method.
        ////////////////////////////////////////////////////////////////////////
        void Start(void);

        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// Removes the thread from scheduler execution.
        ////////////////////////////////////////////////////////////////////////
        void Stop(void);

    protected:
        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// Overloaded Constructor
        ///
        /// @param[in] taskName      The name of the task
        /// @param[in] taskPriority  The priority of this task
        /// @param[in] stackDepth    The stack depth allocated for the task
        ////////////////////////////////////////////////////////////////////////
        ITask(char const * taskName,
              int taskPriority = ITask::Defaults::Priority,
              int stackDepth = ITask::Defaults::StackDepth);

        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// The body of the task - typically an infinite loop.
        ///
        /// @see RunWrapper()
        ////////////////////////////////////////////////////////////////////////
        virtual void Run(void) = 0;

    private:
        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// Thread entry point.
        ///
        /// @param[in] taskParameters  Task parameters set during task creation.
        ////////////////////////////////////////////////////////////////////////
        static void RunWrapper(void * taskParameters);

    private:
        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// Storage for the name of this task.
        ////////////////////////////////////////////////////////////////////////
        char mTaskName[configMAX_TASK_NAME_LEN];

        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// The priority of this task.
        ///
        /// @remarks
        /// 0 is the lowest priority.
        ////////////////////////////////////////////////////////////////////////
        int mTaskPriority;

        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// The stack depth for this task, in words.
        ////////////////////////////////////////////////////////////////////////
        int mTaskStackDepth;

        ////////////////////////////////////////////////////////////////////////
        /// @brief
        /// The OS-specific handle associated with this task.
        ////////////////////////////////////////////////////////////////////////
        TaskHandle_t mTaskHandle;
};


#endif // __I_TASK_H__


////////////////////////////////////////////////////////////////////////////////
// END OF FILE
////////////////////////////////////////////////////////////////////////////////

